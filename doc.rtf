{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fmodern\fcharset0 CourierNewPS-BoldMT;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww17320\viewh13660\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 Comparator (Object)
\f1\b0 \
	- implements a method compare(Object a, Object b)\
	- returns -1 if a < b, 1 if a > b, 0 if a == b. \
	- compare ()should cast a and b to the desired types before performing comparison\
	- see Comparator example for details
\f0\b \
\
INTEAD OF .init()
\f1\b0 \
	- create a static method .new(string [contrsurctor]) that returns a fully initialized collection\
\
add iterator to symbol table, possibly:\
	- return a list of keys 
\f0\b THIS ONE
\f1\b0  \
	- return a list of key/value pairs\
	- have an iterator \

\f0\b \

\f1\b0 replace .get() with get[Type]() functions 
\f0\b \
\
\
LIST API
\f1\b0 \
\
(TODO - add concatenation of Lists) \
\
.newList(string) \
	- returns a new list\
	- takes \'93int\'94 \'93float\'94 \'93string\'94 or \'93Object\'94\
	- Determines whether list element are int, float, string, or Object\
	- Cannot call any other List functions w/o first initializing list\
\
.size()\
	- returns number of elements in the list\
\
.set(int index, [type] item)\
	- returns void\
	- if list has at least index+1 elements, puts item in position index \
		- otherwise fails\
		- replaces the item that was initially at index\
\
.get[type](int index)\
	- if list has at least index+1 elements, returns item at index \
		- otherwise, fails\
\
.insert(int index, [type] item)\
	- returns void\
	- if list has at least index+1 elements, shifts forward everything with in list from index onwards, and puts item at index\
	- if not at least index+1 elements, fails\
\
.push([type] item)\
	- returns void\
	- adds item to end of list\
\
.pop[type]()\
	- returns item at end of list, removing it from list\
\
.enqueue([type] item)\
	- returns void\
	- same as insert(0, item)\
\
.dequeue[type]()\
	- returns item at start of list, removing it from list \
\
.sort([Comparator c])\
	- returns void\
	- sorts the list (c is required if the list has Object items)\
\

\f0\b SYMBOL TABLE API
\f1\b0 \
\
.newTable(string key, string value, [Comparator c])\
	- returns a new symbol table\
	- tells symbol table what types of keys and values to expect\
	- key and value take \'93int\'94 \'93float\'94 \'93string\'94 or \'93Object\'94\
	- if key is \'93Object\'94, need to specify a comparator that allows you to compare objects\
	- cannot use any other methods on a symbol table until init() is called\
\
.size()\
	- returns number of (key, value) pairs in the list\
\
.put([type] key, [type] value)\
	- returns void\
	- puts (key, value) pair in table\
\
.contains([type] key)\
	- returns 1 if table contains a value associated with key, 0 otherwise\
\
.get[type]([type] key)\
	- returns the value associated with key if key is in table, null otherwise\
\
.delete([type] key)\
	- returns value associated with key if key in table, null otherwise\
	- deletes (key, value) from table if it exists in table \
\

\f0\b Chord API
\f1\b0 \
\
(TODO - duration should be a float (a relative time))\
\
.newChord(int[] pitchList, [dur durat])\
	- returns a chord with duration durat with the notes in noteList\
\
.addPitch(int p)\
	- returns void\
	- adds p to pitches of chord\
\
.removePitch(int p)\
	- returns void\
 	- removes p from chord if it is in the chord\
\

\f0\b Note API
\f1\b0 \
\
(TODO - durations stuff in API) \
\
.midi(int i) \
	- returns a note with pitch value i\
\
.pitch(string s)\
	- returns a note with the pitch string (internally an int mapped to s)\
\

\f0\b Voice API
\f1\b0 \
\
[Voice is a list of Chords, so all list methods with Chord items are valid]\
\
.play([ int instrument, dur beat ])\
	- returns void\
	- plays voice with specified instrument at specified bpm. If these arguments are not provided, defaults are used. \
\
.setMidiDevice(int dev, int chan)\
	- return void\
	- sets midiOut device to the one specified by dev on channel chan \
		(use chuck --probe in command line to see num-device mappings) \
\
.playMidi(int flag)\
	- return void\
	- if flag is 1, plays midi instead of audio, else, plays audio \
\
.setInstrument(int i)\
	- returns void\
	- sets what instrument plays the notes in the voice\
\
\

\f0\b Part API
\f1\b0 \
\
[Section is a list of Voices, so all list methods with Voice items are valid]\
\
.play( [ dur beat ] )\
	- returns void\
	- plays section with specified instrument at specified bpm. If these arguments are not provided, defaults are used. \
\
}